@use "sass:math";

@import url(https://fonts.googleapis.com/css?family=Open+Sans:regular,600,700&display=swap); 
@import url(https://fonts.googleapis.com/css?family=Manrope:regular,700&display=swap);

$fontfamily:'Open Sans';

//===========================================================================================================================
//Percent
@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}
//REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}
//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}
//adaptive value
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}
	@if ($minSize <= 0) {
		$minSize: 0.0001;
	}
	@if ($startSize <= 0) {
		$startSize: 0.0001;
	}

	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	// Получение значения свойства
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	// Если отрицательные значения
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	@if $widthFrom == $containerWidth or $widthFrom == $maxWidth or $keepSize == 1 or $keepSize == 2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		#{$property}: $propertyValue;
	}
	@if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}

//===========================================================================================================================
$minWidth: 320;
// Ширина полотна (макета)
$maxWidth: 1400;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1201;

$containerPadding: 30;

// Ширина страбатывания первого брейкпоинта
$containerWidth: $containerPadding + $maxWidthContainer;

// break-points
$pc: em($containerWidth); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: em(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: em(767.98); // Телефоны L
$mobileSmall: em(479.98); // Телефоны S
//</variables>

//===========================================================================================================
.wrapper {
	min-height: 100%;
	display: flex;
	flex-direction: column;
	overflow: hidden;
	// Прижимаем footer
	> main {
		flex: 1 1 auto;
	}
	// Фикс для слайдеров
	> * {
		min-width: 0;
	}
	}
//===========================================================================================================


//<responsive grid>===========================================================================================================
[class*="__container"] {
    @if ($maxWidthContainer>0) {
        max-width: rem($containerWidth);
        margin: 0 auto;
    }
    @if ($containerPadding>0) {
        @if ($maxWidthContainer>0) {
            padding: 0 rem(math.div($containerPadding, 2));
        } 
    }
}

/* break points 
[class*="__container"] {
	max-width: em($maxWidthContainer);
	margin: 0 auto;
	width: 100%;

	@media (max-width: $pc) {
		max-width: em(970);
		padding: 0 15px;
		
	}
	@media (max-width: $tablet) {
		max-width: em(768);
	
	}
	@media (max-width: $mobile) {
		max-width: none;
		padding: 0 20px;
	}
}
*/
//<responsive grid>===========================================================================================================


//<null>===========================================================================================================
* {
	padding: 0px;
	margin: 0px;
	border: 0px;

}
*,
*:before,
*:after {
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}
:focus,
:active {
	outline: none;
}
a:focus,
a:active {
	outline: none;
}
aside,
nav,
footer,
header,
section {
	display: block;
}
html,
body {
	height: 100%;
	min-width: $minWidth;
}
body {
	line-height: 1;
	font-family: $fontfamily;
	-ms-text-size-adjust: 100%;
	-moz-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
}
input,
button,
textarea {
	font-family: $fontfamily;
}
input::-ms-clear {
	display: none;
}
button {
	cursor: pointer;
	color: inherit;
	font-size: inherit;
	background-color: inherit;
}
button::-moz-focus-inner {
	padding: 0;
	border: 0;
}
a {
	color: inherit;
	transition: 0.4s ease-in;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
ul li {
	list-style: none;
}
img {
	vertical-align: top;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}

//=================================================


.main {
	margin-top: 30px;
}
.main__container {
	display: grid;
	grid-template-columns: 1fr;
	place-items: center;
	gap: 15px 20px;
	img{
		object-fit: cover;
		width: 300px;
		height: 100%;
	}
}
.main__title {
	font-size: 30px;
	letter-spacing: 2px;
	color: rgb(59, 59, 75);
	line-height: 1.3;
}
.main__form {
	background-color: rgb(210, 210, 245);
	max-width: 600px;
	width: 100%;
	height: 70px;
	border-radius: 5px;
	display: flex;
	justify-content: center;
	align-items: center;
	border: 2px solid black;
	padding: 10px 10px;
}
.form__input {
	width: 70%;
	border: 2px solid black; 
	padding: 7px 15px;
	border-radius: 10px 0 0 10px;
	font-size: 17px;
	transition: all 0.3s ease;
	&:focus{
		background-color: rgb(210, 210, 245);
	}
}
.form__btn{
	font-size: 17px;
	padding: 7px 15px;
	border: 2px solid black;
	border-radius: 0 10px 10px 0;
	border-left: 0px;
	transition: all 0.3s ease;
	&:hover{
		background-color: rgb(40, 45, 54);
		color: white;
	}
	&:active{
		background-color: rgb(209, 210, 239);
	}
}

//=====

@keyframes spinner {
	to {
	  transform: rotate(360deg);
	}
  }
  
  .loading {
	width: 6rem;
	height: 6rem;
	border: 5px solid rgb(219, 215, 215);
	border-radius: 50%;
	border-top-color: rgb(143, 143, 255);
	animation: spinner 0.6s linear infinite;
  }

.main__grid {
	display: grid;
	grid-template-columns: 1fr;
	gap: 30px 15px;
	width: 100%;
	margin: 0 auto 30px auto;
	@media (min-width:$mobileSmall){
		width: 70%;
   }
	@media (min-width:$mobile){
		grid-template-columns: 1fr 1fr; 
		width: 90%;
   }
	@media (min-width:$tablet){
		 grid-template-columns: 1fr 1fr 1fr; 
		 width: 100%;
	}
}
.loading {
}
.results__item {
	background-color: rgb(237, 236, 243);
	border-radius: 10px;
	padding: 15px 15px;
	&:hover{
		background-color: grey;
	}
}
.results__title {
	font-size: 25px;
	line-height: 1.3;
	margin-bottom: 30px;
	color: rgb(87, 69, 163);

}
.results__snippet {
	&:first-letter{
		text-transform: uppercase;
	}
	line-height: 1.2;

}

.results__error{
	text-align: center;
	font-size: 20px;
	letter-spacing: 2px;
	margin: 30px auto 10px auto;
	display: block;
	max-width: 400px;
	line-height: 1.3;
	color: rgb(40, 37, 69);
}

.btn-show{
	display: block;
	background-color: rgb(31, 31, 68);
	border-radius: 15px;
	padding: 10px 15px;
	margin: 10px auto 15px auto;
	color: white;
	
}